// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smilebox.Data.EntityFramework;

namespace Smilebox.Data.EntityFramework.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20200407112009_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Smilebox.Data.Contracts.Models.DbComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CommentDate");

                    b.Property<int>("PostId");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 5, 30, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            PostId = 4,
                            Text = "I'm a test comment to post id #4"
                        },
                        new
                        {
                            Id = 2,
                            CommentDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 15, 30, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            PostId = 5,
                            Text = "I'm a test comment to post id #5"
                        },
                        new
                        {
                            Id = 3,
                            CommentDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 15, 55, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            PostId = 5,
                            Text = "I'm a test comment to post id #5"
                        },
                        new
                        {
                            Id = 4,
                            CommentDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 25, 15, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            PostId = 6,
                            Text = "I'm a test comment to post id #6"
                        },
                        new
                        {
                            Id = 5,
                            CommentDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 25, 30, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            PostId = 6,
                            Text = "I'm a test comment to post id #6"
                        },
                        new
                        {
                            Id = 6,
                            CommentDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 25, 45, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            PostId = 6,
                            Text = "I'm a test comment to post id #6"
                        });
                });

            modelBuilder.Entity("Smilebox.Data.Contracts.Models.DbPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("PostDate");

                    b.Property<string>("Text")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PostDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 1, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Text = "I'm a test post without comments",
                            Title = "Test post #1 without comments"
                        },
                        new
                        {
                            Id = 2,
                            PostDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 10, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Text = "I'm a test post without comments",
                            Title = "Test post #2 without comments"
                        },
                        new
                        {
                            Id = 3,
                            PostDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 20, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Text = "I'm a test post without comments",
                            Title = "Test post #3 without comments"
                        },
                        new
                        {
                            Id = 4,
                            PostDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 5, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Text = "I'm a test post with comments",
                            Title = "Test post #1 with 1 comment"
                        },
                        new
                        {
                            Id = 5,
                            PostDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 15, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Text = "I'm a test post with comments",
                            Title = "Test post #2 with 2 comments"
                        },
                        new
                        {
                            Id = 6,
                            PostDate = new DateTimeOffset(new DateTime(2020, 4, 7, 0, 25, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 3, 0, 0, 0)),
                            Text = "I'm a test post with comments",
                            Title = "Test post #3 with 3 comments"
                        });
                });

            modelBuilder.Entity("Smilebox.Data.Contracts.Models.DbComment", b =>
                {
                    b.HasOne("Smilebox.Data.Contracts.Models.DbPost", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
